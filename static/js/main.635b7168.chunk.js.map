{"version":3,"sources":["component/Titles.js","component/Form.js","component/WeatherComp.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","Form","props","onSubmit","getWeather","type","name","placeholder","required","WeatherComp","city","country","temperature","humidity","pressure","description","WindSpeed","error","API_KEY","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","_this","setState","main","temp","sys","weather","wind","speed","stop","className","component_Titles","component_Form","this","component_WeatherComp","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRAYeA,EATA,WACP,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,qDCMDC,EAXF,SAACC,GACN,OACIJ,EAAAC,EAAAC,cAAA,QAAMG,SAAUD,EAAME,YAClBN,EAAAC,EAAAC,cAAA,SAAOK,KAAK,OAAOC,KAAK,OAAOC,YAAY,YAAYC,UAAQ,IAC/DV,EAAAC,EAAAC,cAAA,SAAOK,KAAK,OAAOC,KAAK,UAAUC,YAAY,eAAeC,UAAQ,IACrEV,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,+BCQDS,EAdK,SAACP,GACb,OAEIJ,EAAAC,EAAAC,cAAA,WACKE,EAAMQ,MAASR,EAAMS,SAAWb,EAAAC,EAAAC,cAAA,sBAAcE,EAAMQ,KAApB,KAA4BR,EAAMS,SAClET,EAAMU,aAAed,EAAAC,EAAAC,cAAA,yBAAiBE,EAAMU,aAC5CV,EAAMW,UAAYf,EAAAC,EAAAC,cAAA,sBAAcE,EAAMW,UACtCX,EAAMY,UAAYhB,EAAAC,EAAAC,cAAA,sBAAcE,EAAMY,UACtCZ,EAAMa,aAAejB,EAAAC,EAAAC,cAAA,uBAAeE,EAAMa,aAC1Cb,EAAMc,WAAalB,EAAAC,EAAAC,cAAA,wBAAgBE,EAAMc,WACzCd,EAAMe,OAASnB,EAAAC,EAAAC,cAAA,SAAIE,EAAMe,SCPpCC,EAAU,mCAiFDC,6MA7EbC,MAAQ,CACNR,iBAAaS,EACbX,UAAMW,EACNV,aAASU,EACTR,cAAUQ,EACVP,cAAUO,EACVN,iBAAaM,EACbL,eAAWK,EACXJ,WAAOI,KAGTjB,iDAAa,SAAAkB,EAAOC,GAAP,IAAAb,EAAAC,EAAAa,EAAAC,EAAA,OAAAC,EAAA3B,EAAA4B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACTP,EAAEQ,iBACIrB,EAAOa,EAAES,OAAOC,SAASvB,KAAKwB,MAC9BvB,EAAUY,EAAES,OAAOC,SAAStB,QAAQuB,MAHjCN,EAAAE,KAAA,EAKcK,MAAK,oDAAAC,OAAsD1B,EAAtD,KAAA0B,OAA8DzB,EAA9D,WAAAyB,OAA+ElB,EAA/E,kBALnB,cAKHM,EALGI,EAAAS,KAAAT,EAAAE,KAAA,EAOUN,EAASc,OAPnB,OAOHb,EAPGG,EAAAS,KASN3B,GAAQC,GACR4B,QAAQC,IAAIf,GAEXgB,EAAKC,SAAS,CACZ9B,YAAaa,EAAKkB,KAAKC,KACvBlC,KAAMe,EAAKnB,KACXK,QAASc,EAAKoB,IAAIlC,QAClBE,SAAUY,EAAKkB,KAAK9B,SACpBC,SAAUW,EAAKkB,KAAK7B,SACpBC,YAAaU,EAAKqB,QAAQ,GAAG/B,YAC7BC,UAAWS,EAAKsB,KAAKC,MACrB/B,MAAM,MAGVwB,EAAKC,SAAS,CACZ9B,iBAAaS,EACbX,UAAMW,EACNV,aAASU,EACTR,cAAUQ,EACVP,cAAUO,EACVN,iBAAaM,EACbL,eAAWK,EACXJ,MAAO,uCA/BF,yBAAAW,EAAAqB,SAAA3B,oIAwCX,OACAxB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAMkD,UAAU,cACZpD,EAAAC,EAAAC,cAACmD,EAAD,MACFrD,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACoD,EAAD,CAAMhD,WAAYiD,KAAKjD,aAEzBN,EAAAC,EAAAC,cAAA,OAAKkD,UAAU,kBACXpD,EAAAC,EAAAC,cAACsD,EAAD,CACE1C,YAAeyC,KAAKjC,MAAMR,YAC1BF,KAAQ2C,KAAKjC,MAAMV,KACnBC,QAAW0C,KAAKjC,MAAMT,QACtBE,SAAYwC,KAAKjC,MAAMP,SACvBC,SAAYuC,KAAKjC,MAAMN,SACvBC,YAAesC,KAAKjC,MAAML,YAC1BC,UAAaqC,KAAKjC,MAAMJ,UACxBC,MAASoC,KAAKjC,MAAMH,mBArEpBsC,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uECVNC,IAASC,OAAOjE,EAAAC,EAAAC,cAACgE,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.635b7168.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Titles = () => {\r\n        return(           \r\n            <div>\r\n                <h1>Weather Finder</h1>\r\n                <p>Find temperature, humidity and more...</p>\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default Titles;","import React from 'react'\r\n\r\nconst Form = (props) => {\r\n        return(\r\n            <form onSubmit={props.getWeather}>\r\n                <input type='text' name='city' placeholder='city name' required></input>\r\n                <input type='text' name='country' placeholder='country name' required></input>\r\n                <br></br>\r\n                <button>Get Weather</button>\r\n            </form>\r\n        )        \r\n}\r\n\r\nexport default Form","import React from 'react'\r\n\r\nconst WeatherComp = (props) => {\r\n        return(\r\n            //if  props.something is true then display the p tag\r\n            <div>\r\n                {props.city &&  props.country && <p>Location: {props.city}, {props.country}</p>}\r\n                {props.temperature && <p>Temperature: {props.temperature}</p>}\r\n                {props.humidity && <p>Humidity: {props.humidity}</p>}\r\n                {props.pressure && <p>Pressure: {props.pressure}</p>}\r\n                {props.description && <p>Condition: {props.description}</p>}\r\n                {props.WindSpeed && <p>Wind Speed: {props.WindSpeed}</p>}\r\n                {props.error && <p>{props.error}</p>}\r\n            </div>\r\n        )\r\n}\r\nexport default WeatherComp","import React from 'react';\nimport Titles from './component/Titles';\nimport Form from  './component/Form';\nimport WeatherComp from './component/WeatherComp';\n\nconst API_KEY = \"787b31a6c8c25e5f3fdf943da2f1c58d\";\n\nclass App extends React.Component{\n\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    pressure: undefined,\n    description: undefined,\n    WindSpeed: undefined, \n    error: undefined\n  }\n//function starts here\n  getWeather = async (e) => {\n      e.preventDefault();\n      const city = e.target.elements.city.value;\n      const country = e.target.elements.country.value;\n\n      const api_call = await fetch (`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${API_KEY}&units=metric`);\n\n      const data = await api_call.json();\n//if the user dose'nt enter a value but press the button\n      if(city && country){\n         console.log(data)\n\n          this.setState({\n            temperature: data.main.temp,\n            city: data.name,\n            country: data.sys.country,\n            humidity: data.main.humidity,\n            pressure: data.main.pressure,\n            description: data.weather[0].description,\n            WindSpeed: data.wind.speed,\n            error:\"\"\n          })\n      } else{\n        this.setState({\n          temperature: undefined,\n          city: undefined,\n          country: undefined,\n          humidity: undefined,\n          pressure: undefined,\n          description: undefined,\n          WindSpeed: undefined,\n          error: \"Please enter the City and Country.\"\n        })\n      }\n     \n  }\n\n\n\n  render(){\n    return(\n    <div>\n        <div  className=\"page-title\">\n            <Titles />\n          <div> \n              <Form getWeather={this.getWeather}/>\n        \n            <div className=\"weather-output\">\n                <WeatherComp \n                  temperature = {this.state.temperature}\n                  city = {this.state.city}\n                  country = {this.state.country}\n                  humidity = {this.state.humidity}\n                  pressure = {this.state.pressure}\n                  description = {this.state.description}\n                  WindSpeed = {this.state.WindSpeed}\n                  error = {this.state.error}\n                />\n            </div>\n          \n          </div>\n        </div>\n    </div>\n    )}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}